--------------------------------------------------------------------------------

Before running, either:
Set environment variable to the file that we want to be our flask application (e.g. flaskblog.py), using

    set (Windows)/export (Linux) FLASK_APP = flaskblog.py
    set FLASK_DEBUG=1 (set's debug server mode)

then using:

flask run

start server from cmd line using (preferred way).

_____OR

add __name__ check and run from cmd line using (alternative way):

python flaskblog.py

--------------------------------------------------------------------------------

MODULES

Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.0 click-7.1.1 flask-1.1.1 itsdangerous-1.1.0

--------------------------------------------------------------------------------

PART 2:

Info:

Starter template: https://getbootstrap.com/docs/4.4/getting-started/introduction/

Links:

https://getbootstrap.com/docs/4.4/getting-started/introduction/
https://palletsprojects.com/p/flask/

--------------------------------------------------------------------------------

PART 3:

install module flask-wtf (to work with forms)
Successfully installed WTForms-2.2.1 flask-wtf-0.14.3


--------------------------------------------------------------------------------

PART 4:

ORM - Object Relational Mapper
install module flask-sqlalchemy (to work with dbs)
Successfully installed SQLAlchemy-1.3.15 flask-sqlalchemy-2.4.1

install pylint
Successfully installed astroid-2.3.3 colorama-0.4.3 isort-4.3.21 lazy-object-proxy-1.4.3 mccabe-0.6.1 pylint-2.4.4 six-1.14.0 wrapt-1.11.2

install black
Successfully installed appdirs-1.4.3 attrs-19.3.0 black-19.10b0 pathspec-0.7.0 regex-2020.2.20 toml-0.10.0 typed-ast-1.4.1

$ python
>>> from flaskblog import db
>>> db.create_all()

(just testing, import the models)
>>> from flaskblog import User, Post
>>> user_1 = User(username='Jason', email='J@demo.com', password='password')
>>> db.session.add(user_1)

rows not committed yet
>>> user_2 = User(username='JohnDoe', email='jd@demo.com', password='password')
>>> db.session.add(user_2)
>>> db.session.commit()

rows now committed

>>> User.query.all()
[User('Jason', 'J@demo.com', 'default.jpg'), User('JohnDoe', 'jd@demo.com', 'default.jpg')]
>>> User.query.first()
User('Jason', 'J@demo.com', 'default.jpg')
>>> User.query.filter_by(username='J%').all()
[]
>>> User.query.filter_by(username='Jason').all()
[User('Jason', 'J@demo.com', 'default.jpg')]
>>> User.query.filter_by(username='Jason').first()
User('Jason', 'J@demo.com', 'default.jpg')
>>> user = User.query.filter_by(username='Jason').first()
>>> user
User('Jason', 'J@demo.com', 'default.jpg')
>>> user.id
1
>>> user = User.query.get(1)
>>> user
User('Jason', 'J@demo.com', 'default.jpg')
>>> user.posts
[]
>>> post_1 = Post(title='Blog 1', content='First Post content.', user_id=user.id)
>>> post_2 = Post(title='Blog 2', content='Second Post content.', user_id=user.id)
>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.commit()
>>> user.posts
[Post('Blog 1', '2020-03-24 05:03:02.479037''), Post('Blog 2', '2020-03-24 05:03:02.481070'')]
>>> for post in user.posts:
...     print(post.title)
...
Blog 1
Blog 2
>>> post = Post.query.first()
>>> post
Post('Blog 1', '2020-03-24 05:03:02.479037'')
>>> post.user_id
1
>>> post.author
User('Jason', 'J@demo.com', 'default.jpg')

drop db structure (tables and rows)
>>> db.drop_all()

recreate db structure
>>> db.create_all()
>>> User.query.all()
[]
>>> Post.query.all()
[]


--------------------------------------------------------------------------------

PART 5: Package

Moving project to a package:
1. create a folder with the name of our application/project/package (e.g. flaskblog)
2. create a __init__.py file in the new folder (e.g. flaskblog)
3. move forms.py, models.py, static and templates folders to package folder


--------------------------------------------------------------------------------

PART 6: Login

install flask-bcrypt
Successfully installed bcrypt-3.1.7 cffi-1.14.0 flask-bcrypt-0.7.1 pycparser-2.20

>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()
>>> bcrypt.generate_password_hash('password')
b'$2b$12$cDz.iTBmeETSPm6zB2GiP.LTc7mW3OnG9c7eOwj5GeIednvvZ/rwW'
>>> bcrypt.generate_password_hash('password').decode('utf-8')
'$2b$12$0nM/M5uQzmcqELfbdyTT2uq3lbyvbEK2RsH7aJUWkqPJCGBa9pG/u'
>>> bcrypt.generate_password_hash('password').decode('utf-8')
'$2b$12$bgXaC6M1ruQPSRf/5J4X6.q/UTmoKCo87GWxHgpCB7S2CCq5v.AWm'
>>> bcrypt.generate_password_hash('password').decode('utf-8')
'$2b$12$DbOMbscGKpfXoIhdzQAWeunLogMfWtgZpvF5ckoLW93SWHMp.FcNC'
>>> hased_pw = bcrypt.generate_password_hash('password').decode('utf-8')
>>> bcrypt.check_password_hash(hased_pw, 'test')
False
>>> bcrypt.check_password_hash(hased_pw, 'password')
True

install flask-login
Successfully installed flask-login-0.5.0


--------------------------------------------------------------------------------

PART 7: User Account and Profile Picture

install Pillow -- image management
Successfully installed Pillow-7.0.0


--------------------------------------------------------------------------------

Part 8 - Create, Update, and Delete Posts


--------------------------------------------------------------------------------

Part 8.5 - Added SQL Pre-load in prep for Part 9


--------------------------------------------------------------------------------

Part 9 - Pagination

* dir(object) will list out the methods on an object

> posts = Post.query.paginate()
{total of 25 items}

> dir(posts)
> posts.per_page
20
> posts.page
1
> for post in posts.items:
>    print(post)
{lists out 20 items}
>
> posts = Post.query.paginate(page=2)
> for post in posts.items:
>    print(post)
{lists out 5 items}

> posts = Post.query.paginate(per_page=5)
{has 5 pages of 5 items}
> posts = Post.query.paginate(per_page=5, page=2)
{next 5}
...


--------------------------------------------------------------------------------

Part 10 - Email and Password Reset

itsdangerous installed with Flask

>>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
>>> s = Serializer("secret", 30)
>>> token = s.dumps({"user_id":1}).decode("utf-8")
>>> token
'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU4NTM2NjkxNywiZXhwIjoxNTg1MzY2OTQ3fQ.eyJ1c2VyX2lkIjoxfQ.fWdrCX4lxxBkTLcFuoJbVynB3mfHmYih3by9FKqhn6PvkdqkhuqZFewga5uWh-0hQxOIjpvheqoUY-KL2jqYCg'
>>> s.loads(token)
{'user_id': 1}
>>> s.loads(token)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\dev\src\Python\FlaskBlog\blog\lib\site-packages\itsdangerous\jws.py", line 202, in loads
    raise SignatureExpired(
itsdangerous.exc.SignatureExpired: Signature expired

install flask-mail
Successfully installed blinker-1.4 flask-mail-0.9.1


--------------------------------------------------------------------------------

Part 11 - Blueprints and configuration

created 3 new packages (main, users, posts) -- defined by folder with __init__.py file


--------------------------------------------------------------------------------

Part 12 - Custom Error Pages

Blueprints need to be packages, hence errors has a __init__.py file
